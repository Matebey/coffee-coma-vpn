from config import load_config
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, MessageHandler, filters
import datetime
import tempfile
import logging
from config import load_config, is_admin
from database import (
    init_db, get_user_configs, add_user, add_payment, 
    get_user_config_count, has_trial_used, get_stats
)
from openvpn_manager import create_ovpn_client_certificate, generate_ovpn_client_config, encrypt_data
from utils import generate_config_name, generate_qr_code, calculate_expiration_date

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã
PAYMENT_VERIFICATION = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        username = update.effective_user.username or "Unknown"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        init_db()
        
        keyboard = [
            [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø (50 —Ä—É–±.)", callback_data='buy')],
            [InlineKeyboardButton("üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (7 –¥–Ω–µ–π)", callback_data='trial')],
            [InlineKeyboardButton("üì± –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏", callback_data='my_configs')],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')]
        ]
        
        if is_admin(user_id):
            keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin')])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üîí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OpenVPN —Å–µ—Ä–≤–∏—Å!\n\n"
            "‚úÖ –ó–∞—â–∏—Ç–∞ –≤–∞—à–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n"
            "üåç –î–æ—Å—Ç—É–ø –∫ –ª—é–±—ã–º —Ä–µ—Å—É—Ä—Å–∞–º\n"
            "‚ö° –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"Start command error: {e}")

async def show_my_configs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        configs = get_user_configs(user_id)
        
        if configs:
            text = "üì± –í–∞—à–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n\n"
            for config in configs:
                status_emoji = "‚úÖ" if config[1] == 'active' else "‚ùå"
                config_type = "üéÅ –ü—Ä–æ–±–Ω—ã–π" if config[3] == 1 else "üí≥ –ü–ª–∞—Ç–Ω—ã–π"
                text += f"{status_emoji} {config_type} - {config[0]}\n"
                if config[2]:
                    text += f"‚è∞ –î–æ: {config[2]}\n"
                text += "\n"
        else:
            text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –∫—É–ø–∏—Ç–µ –¥–æ—Å—Ç—É–ø!"
        
        await update.message.reply_text(text)
    except Exception as e:
        logger.error(f"My configs error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")

async def show_payment_methods(query, context):
    try:
        config = load_config()
        user_id = query.from_user.id
        
        PAYMENT_VERIFICATION[user_id] = {'status': 'waiting_screenshot'}
        
        payment_text = f"""
üí≥ –û–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–∞

–°—Ç–æ–∏–º–æ—Å—Ç—å: {config['price']} —Ä—É–±.
–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 30 –¥–Ω–µ–π

üì≤ –û–ø–ª–∞—Ç–∞ –ø–æ –°–ë–ü:
1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {config['price']} —Ä—É–±. –Ω–∞ –Ω–∞—à —Å—á–µ—Ç
2. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç

üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:
{config['wallet_number']}

–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª.
        """
        
        await context.bot.send_message(chat_id=user_id, text=payment_text)
        
    except Exception as e:
        logger.error(f"Payment methods error: {e}")

async def handle_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        username = update.effective_user.username or "Unknown"
        
        if user_id not in PAYMENT_VERIFICATION or PAYMENT_VERIFICATION[user_id]['status'] != 'waiting_screenshot':
            return
        
        if update.message.photo:
            photo = update.message.photo[-1]
            file_id = photo.file_id
            
            file = await context.bot.get_file(file_id)
            screenshot_path = f"payment_{user_id}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
            await file.download_to_drive(screenshot_path)
            
            PAYMENT_VERIFICATION[user_id] = {
                'status': 'verifying',
                'screenshot_path': screenshot_path,
                'timestamp': datetime.datetime.now()
            }
            
            result = await create_user_config(user_id, username, is_trial=False)
            
            if result['success']:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 30 –¥–Ω–µ–π.\n\n"
                         f"üîß –ò–º—è –∫–æ–Ω—Ñ–∏–≥–∞: {result['config_name']}\n"
                         f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {result['expires_at']}"
                )
                
                if result['qr_buffer']:
                    await context.bot.send_photo(
                        chat_id=user_id,
                        photo=result['qr_buffer'],
                        caption="QR –∫–æ–¥ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ OpenVPN"
                    )
                
                with tempfile.NamedTemporaryFile(mode='w+', suffix='.ovpn', delete=False) as temp_file:
                    temp_file.write(result['config'])
                    temp_file.flush()
                    
                    with open(temp_file.name, 'rb') as config_file:
                        await context.bot.send_document(
                            chat_id=user_id,
                            document=config_file,
                            filename=f"{result['config_name']}.ovpn",
                            caption="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª OpenVPN"
                        )
                
                config = load_config()
                for admin_id in config['admin_ids']:
                    try:
                        await context.bot.send_message(
                            chat_id=admin_id,
                            text=f"üí∞ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!\n\n"
                                 f"üë§ User ID: {user_id}\n"
                                 f"üë§ Username: @{username}\n"
                                 f"üí≥ –°—É–º–º–∞: {config['price']} —Ä—É–±.\n"
                                 f"üìÖ –í—Ä–µ–º—è: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                        )
                    except Exception as admin_error:
                        logger.error(f"Admin notification error: {admin_error}")
                
            else:
                await context.bot.send_message(
                    chat_id=user_id,
                    text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
            
            if user_id in PAYMENT_VERIFICATION:
                del PAYMENT_VERIFICATION[user_id]
                
    except Exception as e:
        logger.error(f"Screenshot handler error: {e}")

async def create_trial_config(query, context):
    try:
        user_id = query.from_user.id
        username = query.from_user.username or "Unknown"
        
        if has_trial_used(user_id):
            await context.bot.send_message(
                chat_id=user_id,
                text="‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
            )
            return
        
        result = await create_user_config(user_id, username, is_trial=True)
        
        if result['success']:
            config = load_config()
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ {config['trial_days']} –¥–Ω–µ–π!\n\n"
                     f"üîß –ò–º—è –∫–æ–Ω—Ñ–∏–≥–∞: {result['config_name']}\n"
                     f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {result['expires_at']}"
            )
            
            if result['qr_buffer']:
                await context.bot.send_photo(
                    chat_id=user_id,
                    photo=result['qr_buffer'],
                    caption="QR –∫–æ–¥ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ OpenVPN"
                )
            
            with tempfile.NamedTemporaryFile(mode='w+', suffix='.ovpn', delete=False) as temp_file:
                temp_file.write(result['config'])
                temp_file.flush()
                
                with open(temp_file.name, 'rb') as config_file:
                    await context.bot.send_document(
                        chat_id=user_id,
                        document=config_file,
                        filename=f"{result['config_name']}.ovpn",
                        caption="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª OpenVPN"
                    )
                    
        else:
            await context.bot.send_message(
                chat_id=user_id,
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞"
            )
            
    except Exception as e:
        logger.error(f"Trial config error: {e}")
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞"
        )

async def help_command(query, context):
    help_text = """
ü§ñ **OpenVPN Bot - –ü–æ–º–æ—â—å**

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/myconfigs - –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

üí° **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –ù–∞–∂–º–∏—Ç–µ ¬´–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥¬ª
2. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥ –∏ QR –∫–æ–¥
3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ OpenVPN

üì± **–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è:**
- OpenVPN Connect (iOS/Android)
- OpenVPN GUI (Windows)
- Tunnelblick (macOS)

üí≥ **–û–ø–ª–∞—Ç–∞:**
- –û–ø–ª–∞—Ç–∞ –ø–æ –°–ë–ü
- –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞
- –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏

‚ùì **–ü—Ä–æ–±–ª–µ–º—ã?** –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
"""
    await context.bot.send_message(chat_id=query.from_user.id, text=help_text)

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    config = load_config()
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='admin_settings')],
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n"
        f"üåê –°–µ—Ä–≤–µ—Ä: {config['server_ip']}:{config['server_port']}\n"
        f"üí∞ –¶–µ–Ω–∞: {config['price']} —Ä—É–±.\n"
        f"üéÅ –ü—Ä–æ–±–Ω—ã–π: {config['trial_days']} –¥–Ω–µ–π",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        
        if query.data == 'buy':
            await show_payment_methods(query, context)
        elif query.data == 'trial':
            await create_trial_config(query, context)
        elif query.data == 'my_configs':
            await show_my_configs_callback(query, context)
        elif query.data == 'help':
            await help_command(query, context)
        elif query.data == 'admin':
            await admin_command_callback(query, context)
        elif query.data == 'admin_stats':
            await admin_stats(query, context)
            
    except Exception as e:
        logger.error(f"Button handler error: {e}")

async def show_my_configs_callback(query, context):
    try:
        user_id = query.from_user.id
        configs = get_user_configs(user_id)
        
        if configs:
            text = "üì± –í–∞—à–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n\n"
            for config in configs:
                status_emoji = "‚úÖ" if config[1] == 'active' else "‚ùå"
                config_type = "üéÅ –ü—Ä–æ–±–Ω—ã–π" if config[3] == 1 else "üí≥ –ü–ª–∞—Ç–Ω—ã–π"
                text += f"{status_emoji} {config_type} - {config[0]}\n"
                if config[2]:
                    text += f"‚è∞ –î–æ: {config[2]}\n"
                text += "\n"
        else:
            text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –∫—É–ø–∏—Ç–µ –¥–æ—Å—Ç—É–ø!"
        
        await context.bot.send_message(chat_id=user_id, text=text)
    except Exception as e:
        logger.error(f"My configs callback error: {e}")

async def admin_command_callback(query, context):
    if not is_admin(query.from_user.id):
        await context.bot.send_message(chat_id=query.from_user.id, text="‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    config = load_config()
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='admin_settings')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=query.from_user.id,
        text=f"üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n–°–µ—Ä–≤–µ—Ä: {config['server_ip']}:{config['server_port']}",
        reply_markup=reply_markup
    )

async def admin_stats(query, context):
    if not is_admin(query.from_user.id):
        return
    
    try:
        stats = get_stats()
        config = load_config()
        
        stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
üéÅ –ü—Ä–æ–±–Ω—ã—Ö: {stats['trial_users']}
üí≥ –ü–ª–∞—Ç–Ω—ã—Ö: {stats['paid_users']}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_users']}
üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {stats['total_revenue']} —Ä—É–±.

‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
üí∞ –¶–µ–Ω–∞: {config['price']} —Ä—É–±.
‚è∞ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {config['trial_days']} –¥–Ω–µ–π
üåê –°–µ—Ä–≤–µ—Ä: {config['server_ip']}:{config['server_port']}
        """
        
        await context.bot.send_message(chat_id=query.from_user.id, text=stats_text)
    except Exception as e:
        logger.error(f"Admin stats error: {e}")

async def create_user_config(user_id, username, is_trial=False):
    try:
        config = load_config()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–∏–≥–æ–≤
        user_config_count = get_user_config_count(user_id)
        max_configs = config.get('max_configs_per_user', 3)
        
        if user_config_count >= max_configs:
            return {'success': False, 'error': f'–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–∏–≥–æ–≤ ({max_configs}) –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏ –∫–ª—é—á–∏
        client_name, private_key, certificate = create_ovpn_client_certificate(username)
        if not private_key or not certificate:
            return {'success': False, 'error': 'Certificate generation failed'}
        
        # –†–∞—Å—á–µ—Ç –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
        expires_at = calculate_expiration_date(is_trial)
        config_name = generate_config_name(user_id)
        
        # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        encrypted_private_key = encrypt_data(private_key)
        encrypted_certificate = encrypt_data(certificate)
        
        add_user(user_id, username, config_name, encrypted_private_key, 
                encrypted_certificate, int(is_trial), int(not is_trial), expires_at)
        
        if not is_trial:
            add_payment(user_id, config['price'], 'sbp', 'completed')
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
        client_config = generate_ovpn_client_config(client_name, private_key, certificate)
        qr_buffer = generate_qr_code(client_config, config_name)
        
        return {
            'success': True,
            'config': client_config,
            'qr_buffer': qr_buffer,
            'config_name': config_name,
            'expires_at': expires_at,
            'client_name': client_name
        }
            
    except Exception as e:
        logger.error(f"Create config error: {e}")
        return {'success': False, 'error': str(e)}
