import logging
import sqlite3
import os
import subprocess
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, Filters
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(config.DB_PATH)
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        username TEXT,
        full_name TEXT,
        balance INTEGER DEFAULT 0,
        trial_used INTEGER DEFAULT 0,
        referral_code TEXT,
        referred_by INTEGER,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∫–ª—é—á–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS keys (
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        key_name TEXT,
        key_data TEXT,
        expires_at DATETIME,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        is_active INTEGER DEFAULT 1
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS payments (
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        amount INTEGER,
        status TEXT,
        payment_method TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    conn.commit()
    conn.close()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ OpenVPN
def generate_ovpn_config(client_name):
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        subprocess.run([
            'bash', '/etc/openvpn/easy-rsa/easyrsa',
            'build-client-full', client_name, 'nopass'
        ], check=True, cwd='/etc/openvpn/easy-rsa/')
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª
        with open(config.OVPN_CONFIG_TEMPLATE, 'r') as template_file:
            config_content = template_file.read()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏
        with open(f"{config.OVPN_KEYS_DIR}{client_name}.crt", 'r') as cert_file:
            cert_data = cert_file.read()
        
        with open(f"{config.OVPN_KEYS_DIR}{client_name}.key", 'r') as key_file:
            key_data = key_file.read()
        
        with open(f"{config.OVPN_KEYS_DIR}ca.crt", 'r') as ca_file:
            ca_data = ca_file.read()
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ —à–∞–±–ª–æ–Ω–µ
        config_content = config_content.replace('<ca>', ca_data)
        config_content = config_content.replace('<cert>', cert_data)
        config_content = config_content.replace('<key>', key_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥
        config_path = f"{config.OVPN_DIR}client-configs/{client_name}.ovpn"
        with open(config_path, 'w') as config_file:
            config_file.write(config_content)
        
        return config_path
    except Exception as e:
        logger.error(f"Error generating OVPN config: {e}")
        return None

# –ö–æ–º–∞–Ω–¥–∞ /start
def start(update: Update, context: CallbackContext):
    user = update.effective_user
    conn = sqlite3.connect(config.DB_PATH)
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user.id,))
    existing_user = cursor.fetchone()
    
    if not existing_user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        referral_code = str(user.id)[-6:]
        cursor.execute(
            'INSERT INTO users (user_id, username, full_name, referral_code) VALUES (?, ?, ?, ?)',
            (user.id, user.username, user.full_name, referral_code)
        )
        
        # –î–∞–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        trial_expires = datetime.now() + timedelta(days=config.TRIAL_PERIOD_DAYS)
        key_name = f"trial_{user.id}"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥
        config_path = generate_ovpn_config(key_name)
        if config_path:
            with open(config_path, 'rb') as config_file:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –≤ –±–∞–∑–µ
                cursor.execute(
                    'INSERT INTO keys (user_id, key_name, key_data, expires_at) VALUES (?, ?, ?, ?)',
                    (user.id, key_name, config_path, trial_expires)
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                context.bot.send_document(
                    chat_id=user.id,
                    document=config_file,
                    caption=f"–í–∞—à –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á –Ω–∞ {config.TRIAL_PERIOD_DAYS} –¥–Ω–µ–π!"
                )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        if context.args:
            referrer_id = int(context.args[0])
            cursor.execute('SELECT * FROM users WHERE user_id = ?', (referrer_id,))
            referrer = cursor.fetchone()
            
            if referrer:
                # –î–∞–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                bonus_expires = datetime.now() + timedelta(days=config.REFERRAL_BONUS_DAYS)
                bonus_key_name = f"ref_bonus_{referrer_id}"
                
                config_path = generate_ovpn_config(bonus_key_name)
                if config_path:
                    with open(config_path, 'rb') as config_file:
                        cursor.execute(
                            'INSERT INTO keys (user_id, key_name, key_data, expires_at) VALUES (?, ?, ?, ?)',
                            (referrer_id, bonus_key_name, config_path, bonus_expires)
                        )
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                        context.bot.send_message(
                            chat_id=referrer_id,
                            text="–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å–Ω—ã–π –∫–ª—é—á –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞!"
                        )
        
        conn.commit()
    
    conn.close()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    show_main_menu(update, context)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def show_main_menu(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data='buy')],
        [InlineKeyboardButton("üîë –ú–æ–∏ –∫–ª—é—á–∏", callback_data='my_keys')],
        [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data='profile')],
        [InlineKeyboardButton("üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á", callback_data='free_key')]
    ]
    
    if update.effective_user.id == config.ADMIN_ID:
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        update.callback_query.edit_message_text(
            text=config.MESSAGES['menu'],
            reply_markup=reply_markup
        )
    else:
        update.message.reply_text(
            text=config.MESSAGES['menu'],
            reply_markup=reply_markup
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    
    if query.data == 'buy':
        show_buy_options(update, context)
    elif query.data == 'my_keys':
        show_my_keys(update, context)
    elif query.data == 'profile':
        show_profile(update, context)
    elif query.data == 'free_key':
        get_free_key(update, context)
    elif query.data == 'admin':
        show_admin_panel(update, context)
    elif query.data == 'back_to_menu':
        show_main_menu(update, context)
    elif query.data.startswith('admin_'):
        handle_admin_actions(update, context, query.data)

# –ü–æ–∫–∞–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∫—É–ø–∫–∏
def show_buy_options(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("1 –º–µ—Å—è—Ü - 300 —Ä—É–±.", callback_data='buy_1')],
        [InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞ - 800 —Ä—É–±.", callback_data='buy_3')],
        [InlineKeyboardButton("6 –º–µ—Å—è—Ü–µ–≤ - 1500 —Ä—É–±.", callback_data='buy_6')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_menu')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.callback_query.edit_message_text(
        text=config.MESSAGES['buy'],
        reply_markup=reply_markup
    )

# –ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def show_profile(update: Update, context: CallbackContext):
    user = update.effective_user
    conn = sqlite3.connect(config.DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute(
        'SELECT balance, referral_code FROM users WHERE user_id = ?',
        (user.id,)
    )
    user_data = cursor.fetchone()
    
    if user_data:
        balance, referral_code = user_data
        referral_link = f"https://t.me/{context.bot.username}?start={user.id}"
        
        profile_text = f"""
üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

üí∞ –ë–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.
üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}
üìä –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {referral_code}

–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!
        """
        
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.callback_query.edit_message_text(
            text=profile_text,
            reply_markup=reply_markup
        )
    
    conn.close()

# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
def show_admin_panel(update: Update, context: CallbackContext):
    if update.effective_user.id != config.ADMIN_ID:
        update.callback_query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏!")
        return
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')],
        [InlineKeyboardButton("üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏", callback_data='admin_keys')],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞", callback_data='admin_settings')],
        [InlineKeyboardButton("üí≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–ª–∞—Ç—ã", callback_data='admin_payment')],
        [InlineKeyboardButton("üéÅ –í—ã–¥–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á", callback_data='admin_give_key')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_menu')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.callback_query.edit_message_text(
        text=config.MESSAGES['admin'],
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∞
def handle_admin_actions(update: Update, context: CallbackContext, action: str):
    if update.effective_user.id != config.ADMIN_ID:
        return
    
    if action == 'admin_stats':
        show_admin_stats(update, context)
    elif action == 'admin_keys':
        show_key_management(update, context)
    elif action == 'admin_settings':
        show_server_settings(update, context)
    elif action == 'admin_payment':
        show_payment_settings(update, context)
    elif action == 'admin_give_key':
        ask_for_user_to_give_key(update, context)

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω—É
def show_admin_stats(update: Update, context: CallbackContext):
    conn = sqlite3.connect(config.DB_PATH)
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    cursor.execute('SELECT COUNT(*) FROM users')
    total_users = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM keys WHERE is_active = 1')
    active_keys = cursor.fetchone()[0]
    
    cursor.execute('SELECT SUM(amount) FROM payments WHERE status = "completed"')
    total_revenue = cursor.fetchone()[0] or 0
    
    stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üîë –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π: {active_keys}
üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue} —Ä—É–±.
    """
    
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='admin')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.callback_query.edit_message_text(
        text=stats_text,
        reply_markup=reply_markup
    )
    
    conn.close()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–µ–º updater –∏ dispatcher
    updater = Updater(config.BOT_TOKEN)
    dispatcher = updater.dispatcher
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dispatcher.add_handler(CommandHandler('start', start))
    dispatcher.add_handler(CallbackQueryHandler(button_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
