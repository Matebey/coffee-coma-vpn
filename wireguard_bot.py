import os
import sqlite3
import subprocess
import qrcode
import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from cryptography.fernet import Fernet
import logging
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ)
BOT_TOKEN = "7953514140:AAGg-AgyL6Y2mvzfyKesnpouJkU6p_B8Zeo"
ADMIN_IDS = [123456789]  # –í–∞—à Telegram ID
PRICE = 50  # –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö
TRIAL_DAYS = 7  # –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
CONFIG_FILE = "config.json"
DB_FILE = "wireguard.db"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
def init_config():
    if not os.path.exists(CONFIG_FILE):
        config = {
            "server_ip": "YOUR_SERVER_IP",
            "server_public_key": "YOUR_SERVER_PUBLIC_KEY",
            "yoo_kassa_token": "YOUR_YOOKASSA_TOKEN",
            "cloud_payments_secret": "YOUR_CLOUD_PAYMENTS_SECRET",
            "admin_ids": ADMIN_IDS,
            "price": PRICE,
            "trial_days": TRIAL_DAYS
        }
        with open(CONFIG_FILE, 'w') as f:
            json.dump(config, f, indent=4)
    return load_config()

def load_config():
    with open(CONFIG_FILE, 'r') as f:
        return json.load(f)

def save_config(config):
    with open(CONFIG_FILE, 'w') as f:
        json.dump(config, f, indent=4)

# –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π
KEY = Fernet.generate_key()
cipher_suite = Fernet(KEY)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            user_id INTEGER,
            username TEXT,
            config_name TEXT,
            private_key TEXT,
            public_key TEXT,
            address TEXT,
            status TEXT DEFAULT 'active',
            is_trial INTEGER DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            expires_at DATETIME,
            last_payment DATETIME
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS payments (
            id INTEGER PRIMARY KEY,
            user_id INTEGER,
            amount INTEGER,
            payment_method TEXT,
            status TEXT DEFAULT 'pending',
            payment_id TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS admin_settings (
            id INTEGER PRIMARY KEY,
            setting_key TEXT UNIQUE,
            setting_value TEXT
        )
    ''')
    
    conn.commit()
    conn.close()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
def generate_client_config(client_private_key, address, config):
    client_config = f"""[Interface]
PrivateKey = {client_private_key}
Address = {address}
DNS = 8.8.8.8, 1.1.1.1

[Peer]
PublicKey = {config['server_public_key']}
Endpoint = {config['server_ip']}:51820
AllowedIPs = 0.0.0.0/0, ::/0
PersistentKeepalive = 25
"""
    return client_config

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ WireGuard
def add_client_to_wg(public_key, address):
    try:
        result = subprocess.run([
            'wg', 'set', 'wg0', 
            'peer', public_key, 
            'allowed-ips', address
        ], capture_output=True, text=True)
        
        if result.returncode != 0:
            logger.error(f"WG error: {result.stderr}")
            return False
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        subprocess.run(['wg', 'quicksave', 'wg0'], check=True)
        return True
        
    except subprocess.CalledProcessError as e:
        logger.error(f"Error adding client: {e}")
        return False

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞
def generate_qr_code(config_text, config_name):
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    qr.add_data(config_text)
    qr.make(fit=True)
    
    img = qr.make_image(fill_color="black", back_color="white")
    img_path = f"{config_name}.png"
    img.save(img_path)
    return img_path

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id):
    config = load_config()
    return user_id in config['admin_ids']

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "Unknown"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM users WHERE user_id = ?", (user_id,))
    if not cursor.fetchone():
        cursor.execute(
            "INSERT INTO users (user_id, username) VALUES (?, ?)",
            (user_id, username)
        )
        conn.commit()
    conn.close()
    
    keyboard = [
        [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data='buy')],
        [InlineKeyboardButton("üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data='trial')],
        [InlineKeyboardButton("üì± –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏", callback_data='my_configs')],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')]
    ]
    
    if is_admin(user_id):
        keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üîí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN —Å–µ—Ä–≤–∏—Å!\n\n"
        "‚úÖ –ó–∞—â–∏—Ç–∏—Ç–µ —Å–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n"
        "üåç –î–æ—Å—Ç—É–ø –∫ –ª—é–±—ã–º —Ä–µ—Å—É—Ä—Å–∞–º\n"
        "‚ö° –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    config = load_config()
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞", callback_data='admin_server')],
        [InlineKeyboardButton("üí≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π", callback_data='admin_payments')],
        [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data='admin_users')],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data='admin_reload')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n"
        f"–°–µ—Ä–≤–µ—Ä: {config['server_ip']}\n"
        f"–¶–µ–Ω–∞: {config['price']} —Ä—É–±.\n"
        f"–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {config['trial_days']} –¥–Ω–µ–π\n"
        f"–ê–¥–º–∏–Ω–æ–≤: {len(config['admin_ids'])}",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    if query.data == 'buy':
        await show_payment_methods(query, context)
    elif query.data == 'trial':
        await create_trial_config(query, context)
    elif query.data == 'my_configs':
        await show_my_configs(query, context)
    elif query.data == 'help':
        await help_command(query, context)
    elif query.data == 'admin':
        await admin_menu(query, context)
    elif query.data.startswith('admin_'):
        await handle_admin_actions(query, context)
    elif query.data.startswith('pay_'):
        await handle_payment_method(query, context)

# –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã
async def show_payment_methods(query, context):
    keyboard = [
        [InlineKeyboardButton("üí≥ –ÆMoney", callback_data='pay_yoomoney')],
        [InlineKeyboardButton("‚òÅÔ∏è Cloud Payments", callback_data='pay_cloud')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    config = load_config()
    
    await context.bot.send_message(
        chat_id=query.from_user.id,
        text=f"üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã\n\n"
             f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {config['price']} —Ä—É–±.\n"
             f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 30 –¥–Ω–µ–π\n\n"
             "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª –∏ QR –∫–æ–¥",
        reply_markup=reply_markup
    )

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–±–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
async def create_trial_config(query, context):
    user_id = query.from_user.id
    config = load_config()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM users WHERE user_id = ? AND is_trial = 1", (user_id,))
    if cursor.fetchone():
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
        )
        conn.close()
        return
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π
    private_key = subprocess.run(['wg', 'genkey'], capture_output=True, text=True).stdout.strip()
    public_key = subprocess.run(['wg', 'pubkey'], input=private_key, capture_output=True, text=True).stdout.strip()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
    cursor.execute("SELECT COUNT(*) FROM users")
    user_count = cursor.fetchone()[0]
    address = f"10.0.0.{user_count + 2}/32"
    
    # –†–∞—Å—á–µ—Ç –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
    expires_at = (datetime.datetime.now() + datetime.timedelta(days=config['trial_days'])).strftime('%Y-%m-%d %H:%M:%S')
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É
    config_name = f"trial_{user_id}"
    cursor.execute(
        """INSERT INTO users (user_id, config_name, private_key, public_key, address, 
           is_trial, expires_at, status) VALUES (?, ?, ?, ?, ?, 1, ?, 'active')""",
        (user_id, config_name, private_key, public_key, address, expires_at)
    )
    conn.commit()
    conn.close()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ WG
    if add_client_to_wg(public_key, address):
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
        client_config = generate_client_config(private_key, address, config)
        qr_path = generate_qr_code(client_config, config_name)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await context.bot.send_message(
            chat_id=user_id,
            text=f"üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
                 f"‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {config['trial_days']} –¥–Ω–µ–π\n"
                 f"üìÖ –î–æ: {expires_at}\n"
                 f"üîß –ò–º—è –∫–æ–Ω—Ñ–∏–≥–∞: {config_name}\n"
                 f"üìç –ê–¥—Ä–µ—Å: {address}"
        )
        
        await context.bot.send_document(
            chat_id=user_id,
            document=open(qr_path, 'rb'),
            caption="QR –∫–æ–¥ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞"
        )
        
        await context.bot.send_document(
            chat_id=user_id,
            document=client_config.encode('utf-8'),
            filename=f"{config_name}.conf",
            caption="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª"
        )
        
        os.remove(qr_path)
    else:
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞"
        )

# –ê–¥–º–∏–Ω –º–µ–Ω—é
async def admin_menu(query, context):
    if not is_admin(query.from_user.id):
        await context.bot.send_message(chat_id=query.from_user.id, text="‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')],
        [InlineKeyboardButton("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞", callback_data='admin_settings')],
        [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data='admin_users')],
        [InlineKeyboardButton("üí≥ –ü–ª–∞—Ç–µ–∂–∏", callback_data='admin_payments')],
        [InlineKeyboardButton("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", callback_data='admin_config')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=query.from_user.id,
        text="üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å - –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏–π
async def handle_admin_actions(query, context):
    user_id = query.from_user.id
    if not is_admin(user_id):
        return
    
    if query.data == 'admin_stats':
        await show_admin_stats(query, context)
    elif query.data == 'admin_settings':
        await admin_server_settings(query, context)
    elif query.data == 'admin_config':
        await admin_config_management(query, context)

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω—É
async def show_admin_stats(query, context):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    
    cursor.execute("SELECT COUNT(*) FROM users")
    total_users = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM users WHERE is_trial = 1")
    trial_users = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM payments WHERE status = 'completed'")
    paid_users = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM users WHERE status = 'active'")
    active_users = cursor.fetchone()[0]
    
    conn.close()
    
    config = load_config()
    
    stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üéÅ –ü—Ä–æ–±–Ω—ã—Ö: {trial_users}
üí≥ –ü–ª–∞—Ç–Ω—ã—Ö: {paid_users}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}

‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
üí∞ –¶–µ–Ω–∞: {config['price']} —Ä—É–±.
‚è∞ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {config['trial_days']} –¥–Ω–µ–π
üåê –°–µ—Ä–≤–µ—Ä: {config['server_ip']}
    """
    
    await context.bot.send_message(chat_id=query.from_user.id, text=stats_text)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    await admin_panel(update, context)

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init_config()
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_command))
    application.add_handler(CommandHandler("myconfigs", show_my_configs))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

if __name__ == '__main__':
    main()
