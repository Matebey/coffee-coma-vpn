import os
import sqlite3
import subprocess
import qrcode
import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from cryptography.fernet import Fernet
import logging
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"
CONFIG_FILE = "config.json"
DB_FILE = "wireguard.db"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
def init_config():
    if not os.path.exists(CONFIG_FILE):
        config = {
            "server_ip": "YOUR_SERVER_IP",
            "server_public_key": "YOUR_SERVER_PUBLIC_KEY",
            "admin_ids": [123456789],  # –í–∞—à Telegram ID
            "price": 100,
            "trial_days": 7
        }
        with open(CONFIG_FILE, 'w') as f:
            json.dump(config, f, indent=4)
    return load_config()

def load_config():
    with open(CONFIG_FILE, 'r') as f:
        return json.load(f)

def save_config(config):
    with open(CONFIG_FILE, 'w') as f:
        json.dump(config, f, indent=4)

# –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π
KEY = Fernet.generate_key()
cipher_suite = Fernet(KEY)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            user_id INTEGER,
            username TEXT,
            config_name TEXT,
            private_key TEXT,
            public_key TEXT,
            address TEXT,
            status TEXT DEFAULT 'active',
            is_trial INTEGER DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            expires_at DATETIME
        )
    ''')
    
    conn.commit()
    conn.close()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
def generate_client_config(client_private_key, address):
    config = load_config()
    client_config = f"""[Interface]
PrivateKey = {client_private_key}
Address = {address}
DNS = 8.8.8.8, 1.1.1.1

[Peer]
PublicKey = {config['server_public_key']}
Endpoint = {config['server_ip']}:51820
AllowedIPs = 0.0.0.0/0, ::/0
PersistentKeepalive = 25
"""
    return client_config

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ WireGuard
def add_client_to_wg(public_key, address):
    try:
        result = subprocess.run([
            'wg', 'set', 'wg0', 
            'peer', public_key, 
            'allowed-ips', address
        ], capture_output=True, text=True, timeout=30)
        
        if result.returncode != 0:
            logger.error(f"WG error: {result.stderr}")
            return False
            
        return True
        
    except subprocess.CalledProcessError as e:
        logger.error(f"Error adding client: {e}")
        return False
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        return False

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞
def generate_qr_code(config_text, config_name):
    try:
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        qr.add_data(config_text)
        qr.make(fit=True)
        
        img = qr.make_image(fill_color="black", back_color="white")
        img_path = f"{config_name}.png"
        img.save(img_path)
        return img_path
    except Exception as e:
        logger.error(f"QR generation error: {e}")
        return None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id):
    config = load_config()
    return user_id in config['admin_ids']

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        username = update.effective_user.username or "Unknown"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM users WHERE user_id = ?", (user_id,))
        if not cursor.fetchone():
            cursor.execute(
                "INSERT INTO users (user_id, username) VALUES (?, ?)",
                (user_id, username)
            )
            conn.commit()
        conn.close()
        
        keyboard = [
            [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data='buy')],
            [InlineKeyboardButton("üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data='trial')],
            [InlineKeyboardButton("üì± –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏", callback_data='my_configs')],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')]
        ]
        
        if is_admin(user_id):
            keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin')])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üîí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN —Å–µ—Ä–≤–∏—Å!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"Start command error: {e}")

# –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏
async def show_my_configs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute("SELECT config_name, address, status, expires_at FROM users WHERE user_id = ?", (user_id,))
        configs = cursor.fetchall()
        conn.close()
        
        if configs:
            text = "üì± –í–∞—à–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n\n"
            for config in configs:
                status_emoji = "‚úÖ" if config[2] == 'active' else "‚ùå"
                text += f"{status_emoji} {config[0]} - {config[1]}\n"
                if config[3]:
                    text += f"   ‚è∞ –î–æ: {config[3]}\n"
        else:
            text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π."
        
        await update.message.reply_text(text)
    except Exception as e:
        logger.error(f"My configs error: {e}")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–±–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
async def create_trial_config(query, context):
    try:
        user_id = query.from_user.id
        config = load_config()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM users WHERE user_id = ? AND is_trial = 1", (user_id,))
        if cursor.fetchone():
            await context.bot.send_message(
                chat_id=user_id,
                text="‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
            )
            conn.close()
            return
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π
        private_key = subprocess.run(['wg', 'genkey'], capture_output=True, text=True).stdout.strip()
        public_key = subprocess.run(['wg', 'pubkey'], input=private_key, capture_output=True, text=True).stdout.strip()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
        cursor.execute("SELECT COUNT(*) FROM users")
        user_count = cursor.fetchone()[0]
        address = f"10.0.0.{user_count + 2}/32"
        
        # –†–∞—Å—á–µ—Ç –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
        expires_at = (datetime.datetime.now() + datetime.timedelta(days=config['trial_days'])).strftime('%Y-%m-%d %H:%M:%S')
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É
        config_name = f"trial_{user_id}"
        cursor.execute(
            """INSERT INTO users (user_id, config_name, private_key, public_key, address, 
               is_trial, expires_at, status) VALUES (?, ?, ?, ?, ?, 1, ?, 'active')""",
            (user_id, config_name, private_key, public_key, address, expires_at)
        )
        conn.commit()
        conn.close()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ WG
        if add_client_to_wg(public_key, address):
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
            client_config = generate_client_config(private_key, address)
            qr_path = generate_qr_code(client_config, config_name)
            
            if qr_path:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
                         f"‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {config['trial_days']} –¥–Ω–µ–π\n"
                         f"üîß –ò–º—è –∫–æ–Ω—Ñ–∏–≥–∞: {config_name}\n"
                         f"üìç –ê–¥—Ä–µ—Å: {address}"
                )
                
                await context.bot.send_photo(
                    chat_id=user_id,
                    photo=open(qr_path, 'rb'),
                    caption="QR –∫–æ–¥ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞"
                )
                
                await context.bot.send_document(
                    chat_id=user_id,
                    document=client_config.encode('utf-8'),
                    filename=f"{config_name}.conf",
                    caption="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª"
                )
                
                os.remove(qr_path)
            else:
                await context.bot.send_message(
                    chat_id=user_id,
                    text="‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞"
                )
        else:
            await context.bot.send_message(
                chat_id=user_id,
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞ –≤ WireGuard"
            )
            
    except Exception as e:
        logger.error(f"Trial config error: {e}")
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞"
        )

# –ü–æ–º–æ—â—å
async def help_command(query, context):
    help_text = """
ü§ñ **WireGuard VPN Bot**

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/myconfigs - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏

üí° **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –ù–∞–∂–º–∏—Ç–µ "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
2. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥ –∏ QR –∫–æ–¥
3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤ WireGuard –∫–ª–∏–µ–Ω—Ç

‚ùì **–ü—Ä–æ–±–ª–µ–º—ã?** –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
"""
    await context.bot.send_message(chat_id=query.from_user.id, text=help_text)

# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    config = load_config()
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='admin_settings')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n"
        f"–°–µ—Ä–≤–µ—Ä: {config['server_ip']}\n"
        f"–¶–µ–Ω–∞: {config['price']} —Ä—É–±.\n"
        f"–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {config['trial_days']} –¥–Ω–µ–π",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        
        if query.data == 'buy':
            await context.bot.send_message(chat_id=user_id, text="üí≥ –§—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        elif query.data == 'trial':
            await create_trial_config(query, context)
        elif query.data == 'my_configs':
            await show_my_configs_callback(query, context)
        elif query.data == 'help':
            await help_command(query, context)
        elif query.data == 'admin':
            await admin_command_callback(query, context)
        elif query.data == 'admin_stats':
            await admin_stats(query, context)
            
    except Exception as e:
        logger.error(f"Button handler error: {e}")

async def show_my_configs_callback(query, context):
    user_id = query.from_user.id
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT config_name, address, status, expires_at FROM users WHERE user_id = ?", (user_id,))
    configs = cursor.fetchall()
    conn.close()
    
    if configs:
        text = "üì± –í–∞—à–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n\n"
        for config in configs:
            status_emoji = "‚úÖ" if config[2] == 'active' else "‚ùå"
            text += f"{status_emoji} {config[0]} - {config[1]}\n"
            if config[3]:
                text += f"   ‚è∞ –î–æ: {config[3]}\n"
    else:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π."
    
    await context.bot.send_message(chat_id=user_id, text=text)

async def admin_command_callback(query, context):
    if not is_admin(query.from_user.id):
        await context.bot.send_message(chat_id=query.from_user.id, text="‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    config = load_config()
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='admin_settings')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=query.from_user.id,
        text=f"üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n–°–µ—Ä–≤–µ—Ä: {config['server_ip']}",
        reply_markup=reply_markup
    )

async def admin_stats(query, context):
    if not is_admin(query.from_user.id):
        return
    
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    
    cursor.execute("SELECT COUNT(*) FROM users")
    total_users = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM users WHERE is_trial = 1")
    trial_users = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM users WHERE status = 'active'")
    active_users = cursor.fetchone()[0]
    
    conn.close()
    
    config = load_config()
    
    stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üéÅ –ü—Ä–æ–±–Ω—ã—Ö: {trial_users}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}

‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
üí∞ –¶–µ–Ω–∞: {config['price']} —Ä—É–±.
‚è∞ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {config['trial_days']} –¥–Ω–µ–π
üåê –°–µ—Ä–≤–µ—Ä: {config['server_ip']}
    """
    
    await context.bot.send_message(chat_id=query.from_user.id, text=stats_text)

def main():
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        init_config()
        init_db()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("admin", admin_command))
        application.add_handler(CommandHandler("myconfigs", show_my_configs))
        application.add_handler(CallbackQueryHandler(button_handler))
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        application.run_polling()
        
    except Exception as e:
        logger.error(f"Fatal error: {e}")
        raise

if __name__ == '__main__':
    main()
