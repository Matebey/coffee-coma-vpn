import os
import sqlite3
import subprocess
import qrcode
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from cryptography.fernet import Fernet
import logging
import tempfile
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–ò –ó–ù–ê–ß–ï–ù–ò–Ø –ù–ê –°–í–û–ò!)
BOT_TOKEN = "7953514140:AAGg-AgyL6Y2mvzfyKesnpouJkU6p_B8Zeo"
ADMIN_IDS = [5631675412]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
PRICE = 100  # –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö
SERVER_IP = "77.239.105.17"  # IP –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
SERVER_PUBLIC_KEY = "AAAAC3NzaC1lZDI1NTE5AAAAIL6JznsxyInWPJLNcrClRTGzU6WwPeadiQS4uM1745UZ root@vm315155.hosted-by.u1host.com"  # –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á —Å–µ—Ä–≤–µ—Ä–∞

# –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Ö—Ä–∞–Ω–∏—Ç–µ –∫–ª—é—á –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ)
KEY = Fernet.generate_key()
cipher_suite = Fernet(KEY)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('wireguard.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            user_id INTEGER,
            config_name TEXT,
            private_key TEXT,
            public_key TEXT,
            address TEXT,
            is_active INTEGER DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS payments (
            id INTEGER PRIMARY KEY,
            user_id INTEGER,
            amount INTEGER,
            status TEXT,
            payment_data TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π WireGuard
def generate_wireguard_keys():
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
        private_key = subprocess.run(
            ['wg', 'genkey'], 
            capture_output=True, 
            text=True, 
            check=True
        ).stdout.strip()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ
        public_key = subprocess.run(
            ['wg', 'pubkey'], 
            input=private_key, 
            capture_output=True, 
            text=True, 
            check=True
        ).stdout.strip()
        
        return private_key, public_key
    except subprocess.CalledProcessError as e:
        logger.error(f"Error generating keys: {e}")
        return None, None

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
def generate_client_config(client_private_key, address):
    config = f"""[Interface]
PrivateKey = {client_private_key}
Address = {address}
DNS = 8.8.8.8, 1.1.1.1

[Peer]
PublicKey = {SERVER_PUBLIC_KEY}
Endpoint = {SERVER_IP}:51820
AllowedIPs = 0.0.0.0/0
PersistentKeepalive = 25
"""
    return config

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ WireGuard
def add_client_to_wg(public_key, address):
    try:
        subprocess.run([
            'wg', 'set', 'wg0', 'peer', 
            public_key, 'allowed-ips', address
        ], check=True)
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"Error adding client to WG: {e}")
        return False

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞
def generate_qr_code(config, config_name):
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    qr.add_data(config)
    qr.make(fit=True)
    
    img = qr.make_image(fill_color="black", back_color="white")
    img_path = f"{config_name}.png"
    img.save(img_path)
    return img_path

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data='buy')],
        [InlineKeyboardButton("üì± –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏", callback_data='my_configs')],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ VPN —á–µ—Ä–µ–∑ WireGuard.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'buy':
        await buy_access(query, context)
    elif query.data == 'my_configs':
        await show_my_configs(query, context)
    elif query.data == 'help':
        await help_command(query, context)

# –ü–æ–∫—É–ø–∫–∞ –¥–æ—Å—Ç—É–ø–∞
async def buy_access(query, context):
    user_id = query.from_user.id
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –±–µ–∑ –æ–ø–ª–∞—Ç—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π
    private_key, public_key = generate_wireguard_keys()
    if not private_key or not public_key:
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
    conn = sqlite3.connect('wireguard.db')
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM users")
    user_count = cursor.fetchone()[0]
    address = f"10.0.0.{user_count + 2}/32"
    
    # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    encrypted_private_key = cipher_suite.encrypt(private_key.encode())
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    config_name = f"client{user_count + 1}"
    cursor.execute(
        "INSERT INTO users (user_id, config_name, private_key, public_key, address, is_active) VALUES (?, ?, ?, ?, ?, ?)",
        (user_id, config_name, encrypted_private_key, public_key, address, 1)
    )
    conn.commit()
    conn.close()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ WG
    if add_client_to_wg(public_key, address):
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
        config = generate_client_config(private_key, address)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞
        qr_path = generate_qr_code(config, config_name)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await context.bot.send_message(
            chat_id=user_id,
            text=f"‚úÖ –í–∞—à –∫–æ–Ω—Ñ–∏–≥ —Å–æ–∑–¥–∞–Ω!\n\n–ò–º—è –∫–æ–Ω—Ñ–∏–≥–∞: {config_name}\n–ê–¥—Ä–µ—Å: {address}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ QR –∫–æ–¥–∞
        with open(qr_path, 'rb') as qr_file:
            await context.bot.send_photo(
                chat_id=user_id,
                photo=qr_file,
                caption="QR –∫–æ–¥ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ WireGuard"
            )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª–∞
        with tempfile.NamedTemporaryFile(mode='w+', suffix='.conf', delete=False) as temp_file:
            temp_file.write(config)
            temp_file.flush()
            
            with open(temp_file.name, 'rb') as config_file:
                await context.bot.send_document(
                    chat_id=user_id,
                    document=config_file,
                    filename=f"{config_name}.conf",
                    caption="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª WireGuard"
                )
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        os.remove(qr_path)
        os.remove(temp_file.name)
        
    else:
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )

# –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏
async def show_my_configs(query, context):
    user_id = query.from_user.id
    conn = sqlite3.connect('wireguard.db')
    cursor = conn.cursor()
    cursor.execute("SELECT config_name, address, is_active FROM users WHERE user_id = ?", (user_id,))
    configs = cursor.fetchall()
    conn.close()
    
    if configs:
        text = "üì± –í–∞—à–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n\n"
        for config in configs:
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if config[2] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            text += f"üîπ {config[0]} - {config[1]} - {status}\n"
    else:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π."
    
    await context.bot.send_message(chat_id=user_id, text=text)

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
async def help_command(query, context):
    help_text = """
ü§ñ **WireGuard VPN Bot**

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/myconfigs - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏
/help - –ü–æ–º–æ—â—å

üí° **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –ù–∞–∂–º–∏—Ç–µ "–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø"
2. –û–ø–ª–∞—Ç–∏—Ç–µ —É—Å–ª—É–≥—É
3. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥ –∏ QR –∫–æ–¥
4. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤ WireGuard –∫–ª–∏–µ–Ω—Ç

‚ùì **–ü—Ä–æ–±–ª–µ–º—ã?** –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
"""
    await context.bot.send_message(chat_id=query.from_user.id, text=help_text, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    conn = sqlite3.connect('wireguard.db')
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM users")
    total_users = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT(DISTINCT user_id) FROM users")
    unique_users = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT(*) FROM users WHERE is_active = 1")
    active_users = cursor.fetchone()[0]
    conn.close()
    
    stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üë• –í—Å–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–æ–≤: {total_users}
üë§ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {active_users}
üí∞ –¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {PRICE} —Ä—É–±.
"""
    await update.message.reply_text(stats_text, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤
async def myconfigs_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_my_configs(update, context)

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stats", admin_stats))
    application.add_handler(CommandHandler("myconfigs", myconfigs_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == '__main__':
    main()
