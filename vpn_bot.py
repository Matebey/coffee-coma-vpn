import logging
import sqlite3
import subprocess
import os
import re
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from config import BOT_TOKEN, ADMINS, OVPN_KEYS_DIR, OVPN_CLIENT_DIR, DB_PATH, DNS_SERVERS, OVPN_PORT

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

class Database:
    def __init__(self):
        self.conn = sqlite3.connect(DB_PATH)
        self.create_tables()

    def create_tables(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS subscriptions (
                user_id INTEGER PRIMARY KEY,
                client_name TEXT,
                config_path TEXT,
                start_date TIMESTAMP,
                end_date TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS settings (
                key TEXT PRIMARY KEY,
                value TEXT
            )
        ''')
        self.conn.commit()

    def add_user(self, user_id, first_name, username):
        cursor = self.conn.cursor()
        cursor.execute('INSERT OR IGNORE INTO users (user_id, first_name, username) VALUES (?, ?, ?)', 
                      (user_id, first_name, username))
        self.conn.commit()

    def add_subscription(self, user_id, client_name, config_path, days):
        start_date = datetime.now()
        end_date = start_date + timedelta(days=days)
        cursor = self.conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO subscriptions (user_id, client_name, config_path, start_date, end_date)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, client_name, config_path, start_date, end_date))
        self.conn.commit()

    def get_user_config(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT config_path FROM subscriptions WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        return result[0] if result else None

    def is_admin(self, user_id):
        return user_id in ADMINS

    def update_setting(self, key, value):
        cursor = self.conn.cursor()
        cursor.execute('INSERT OR REPLACE INTO settings (key, value) VALUES (?, ?)', (key, value))
        self.conn.commit()
        return True

    def get_setting(self, key, default=None):
        cursor = self.conn.cursor()
        cursor.execute('SELECT value FROM settings WHERE key = ?', (key,))
        result = cursor.fetchone()
        return result[0] if result else default

class OpenVPNManager:
    def create_client_config(self, client_name):
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        try:
            subprocess.run([
                'cd /etc/openvpn/easy-rsa/ && ./easyrsa gen-req {} nopass'.format(client_name),
            ], shell=True, check=True, capture_output=True)
            
            subprocess.run([
                'cd /etc/openvpn/easy-rsa/ && echo "yes" | ./easyrsa sign-req client {}'.format(client_name),
            ], shell=True, check=True, capture_output=True)
        except subprocess.CalledProcessError as e:
            logger.error(f"OpenVPN error: {e.stderr}")
            raise

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        dns1 = self.db.get_setting('dns1', '8.8.8.8')
        dns2 = self.db.get_setting('dns2', '8.8.4.4')
        port = self.db.get_setting('port', '1194')
        server_ip = subprocess.check_output("curl -s ifconfig.me", shell=True).decode().strip()

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        config_content = f'''client
dev tun
proto udp
remote {server_ip} {port}
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
cipher AES-256-CBC
verb 3
<ca>
{open(os.path.join(OVPN_KEYS_DIR, 'ca.crt')).read()}
</ca>
<cert>
{open(os.path.join(OVPN_KEYS_DIR, 'issued', f'{client_name}.crt')).read()}
</cert>
<key>
{open(os.path.join(OVPN_KEYS_DIR, 'private', f'{client_name}.key')).read()}
</key>
<tls-auth>
{open(os.path.join(OVPN_KEYS_DIR, 'ta.key')).read()}
</tls-auth>
key-direction 1
'''

        config_path = os.path.join(OVPN_CLIENT_DIR, f'{client_name}.ovpn')
        with open(config_path, 'w') as f:
            f.write(config_content)
        
        return config_path

    def __init__(self):
        self.db = Database()

class VPNBot:
    def __init__(self):
        self.db = Database()
        self.ovpn = OpenVPNManager()
        self.application = Application.builder().token(BOT_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("buy", self.buy))
        self.application.add_handler(CommandHandler("myconfig", self.my_config))
        self.application.add_handler(CommandHandler("admin", self.admin_panel))
        self.application.add_handler(CommandHandler("settings", self.settings_panel))
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        self.db.add_user(user.id, user.first_name, user.username)
        
        keyboard = [
            [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø (50 —Ä—É–±/–º–µ—Å—è—Ü)", callback_data='buy')],
            [InlineKeyboardButton("üìÅ –ú–æ–π –∫–æ–Ω—Ñ–∏–≥", callback_data='myconfig')]
        ]
        
        if self.db.is_admin(user.id):
            keyboard.append([InlineKeyboardButton("üë®‚Äçüíª –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin_panel')])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_html(
            f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\\n\\n"
            "ü§ñ <b>Coffee Coma VPN Bot</b> - –ø—Ä–æ–¥–∞–∂–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ VPN —Å–µ—Ä–≤–µ—Ä—É\\n\\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

    async def buy(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        price = self.db.get_setting('price', 50)
        payment_url = f"https://yoomoney.ru/quickpay/confirm.xml?receiver=–í–ê–®_–ù–û–ú–ï–†_–ö–û–®–ï–õ–¨–ö–ê&quickpay-form=small&sum={price}&label=vpn_{user.id}&paymentType=AC"
        
        keyboard = [[InlineKeyboardButton(f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {price} —Ä—É–±", url=payment_url)]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"–û–ø–ª–∞—Ç–∏—Ç–µ {price} —Ä—É–±–ª–µ–π –∑–∞ –¥–æ—Å—Ç—É–ø –Ω–∞ 1 –º–µ—Å—è—Ü\\n\\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /checkpayment –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
            reply_markup=reply_markup
        )

    async def my_config(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        config_path = self.db.get_user_config(user_id)
        
        if config_path and os.path.exists(config_path):
            await update.message.reply_document(
                document=open(config_path, 'rb'),
                caption="–í–∞—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª OpenVPN"
            )
        else:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ö—É–ø–∏—Ç–µ –¥–æ—Å—Ç—É–ø /buy")

    async def admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.db.is_admin(user_id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        keyboard = [
            [InlineKeyboardButton("üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø", callback_data='admin_free')],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞", callback_data='admin_settings')],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text("üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=reply_markup)

    async def settings_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.db.is_admin(user_id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        dns1 = self.db.get_setting('dns1', '8.8.8.8')
        dns2 = self.db.get_setting('dns2', '8.8.4.4')
        port = self.db.get_setting('port', '1194')
        price = self.db.get_setting('price', '50')
        
        keyboard = [
            [InlineKeyboardButton(f"üåê DNS: {dns1} {dns2}", callback_data='change_dns')],
            [InlineKeyboardButton(f"üîå –ü–æ—Ä—Ç: {port}", callback_data='change_port')],
            [InlineKeyboardButton(f"üí∞ –¶–µ–Ω–∞: {price} —Ä—É–±", callback_data='change_price')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = "‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞:</b>\n\n"
        message += f"üåê <b>DNS —Å–µ—Ä–≤–µ—Ä—ã:</b> {dns1}, {dns2}\n"
        message += f"üîå <b>–ü–æ—Ä—Ç OpenVPN:</b> {port}\n"
        message += f"üí∞ <b>–¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏:</b> {price} —Ä—É–±\n\n"
        message += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
        
        await update.message.reply_html(message, reply_markup=reply_markup)

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        if not self.db.is_admin(user_id):
            await query.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        if query.data == 'buy':
            await self.buy(update, context)
        elif query.data == 'myconfig':
            await self.my_config(update, context)
        elif query.data == 'admin_panel':
            await self.admin_panel(update, context)
        elif query.data == 'admin_free':
            await self.create_free_config(query)
        elif query.data == 'admin_settings':
            await self.settings_panel(update, context)
        elif query.data == 'admin_stats':
            await self.show_stats(query)
        elif query.data == 'change_dns':
            context.user_data['awaiting_input'] = 'dns'
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ DNS —Å–µ—Ä–≤–µ—Ä—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>1.1.1.1 1.0.0.1</code>):", parse_mode='HTML')
        elif query.data == 'change_port':
            context.user_data['awaiting_input'] = 'port'
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Ä—Ç –¥–ª—è OpenVPN (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>443</code>):", parse_mode='HTML')
        elif query.data == 'change_price':
            context.user_data['awaiting_input'] = 'price'
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>100</code>):", parse_mode='HTML')
        elif query.data == 'admin_back':
            await self.admin_panel(update, context)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        text = update.message.text
        
        if not self.db.is_admin(user_id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        if 'awaiting_input' not in context.user_data:
            return
        
        input_type = context.user_data['awaiting_input']
        
        try:
            if input_type == 'dns':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç DNS
                dns_servers = text.split()
                if len(dns_servers) != 2:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ 2 DNS —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ IP –∞–¥—Ä–µ—Å–∞
                ip_pattern = r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$'
                if not re.match(ip_pattern, dns_servers[0]) or not re.match(ip_pattern, dns_servers[1]):
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç IP –∞–¥—Ä–µ—Å–æ–≤.")
                    return
                
                self.db.update_setting('dns1', dns_servers[0])
                self.db.update_setting('dns2', dns_servers[1])
                await update.message.reply_text(f"‚úÖ DNS —Å–µ—Ä–≤–µ—Ä—ã –∏–∑–º–µ–Ω–µ–Ω—ã: {dns_servers[0]}, {dns_servers[1]}")
                
            elif input_type == 'port':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Ä—Ç —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 65535
                if not text.isdigit() or not (1 <= int(text) <= 65535):
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 65535.")
                    return
                
                self.db.update_setting('port', text)
                await update.message.reply_text(f"‚úÖ –ü–æ—Ä—Ç –∏–∑–º–µ–Ω–µ–Ω: {text}")
                
            elif input_type == 'price':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–Ω–∞ —á–∏—Å–ª–æ
                if not text.isdigit() or int(text) <= 0:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
                    return
                
                self.db.update_setting('price', text)
                await update.message.reply_text(f"‚úÖ –¶–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞: {text} —Ä—É–±")
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
            del context.user_data['awaiting_input']
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await self.settings_panel(update, context)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            del context.user_data['awaiting_input']

    async def create_free_config(self, query):
        user_id = query.from_user.id
        if not self.db.is_admin(user_id):
            await query.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            client_name = f"admin_{user_id}_{int(datetime.now().timestamp())}"
            config_path = self.ovpn.create_client_config(client_name)
            self.db.add_subscription(user_id, client_name, config_path, 30)
            
            await query.message.reply_document(
                document=open(config_path, 'rb'),
                caption="‚úÖ –í–∞—à –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –Ω–∞ 30 –¥–Ω–µ–π —Å–æ–∑–¥–∞–Ω!"
            )
        except Exception as e:
            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {str(e)}")

    async def show_stats(self, query):
        user_id = query.from_user.id
        if not self.db.is_admin(user_id):
            await query.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM users')
        users_count = cursor.fetchone()[0]
        cursor.execute('SELECT COUNT(*) FROM subscriptions')
        subs_count = cursor.fetchone()[0]
        conn.close()
        
        await query.message.reply_text(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\\nüîó –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {subs_count}"
        )

    def run(self):
        self.application.run_polling()

if __name__ == "__main__":
    bot = VPNBot()
    bot.run()
