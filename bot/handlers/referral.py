from aiogram import Dispatcher, types
from aiogram.types import Message

from bot.utils.config import Config
from bot.database.models import Referral, User
from bot.utils.helpers import generate_random_string

async def referral_command(message: Message):
    """–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"""
    user_id = message.from_user.id
    user = await User.get(user_id)
    
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    referrals = await Referral.query.where(
        Referral.referrer_id == user_id
    ).gino.all()
    
    total_earned = sum(ref.earned for ref in referrals)
    
    referral_link = f"https://t.me/{(await message.bot.me).username}?start=ref{user_id}"
    
    await message.answer(
        f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
        f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: <code>{referral_link}</code>\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {len(referrals)}\n"
        f"‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_earned} —Ä—É–±.\n\n"
        f"üíµ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {Config.REFERRAL_PERCENT * 100}% "
        f"–æ—Ç –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance} —Ä—É–±.",
        parse_mode=types.ParseMode.HTML
    )

def register_referral_handlers(dp: Dispatcher):
    dp.register_message_handler(referral_command, commands=['referral', 'ref'])
