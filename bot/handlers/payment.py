from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery, InputFile

from bot.utils.config import Config
from bot.database.models import Payment, User
from bot.services.payment import PaymentService
from bot.services.vpn import VPNService
from bot.keyboards.main import get_payment_keyboard

async def buy_command(message: Message):
    """–ü–æ–∫—É–ø–∫–∞ VPN"""
    await message.answer(
        "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:</b>\n\n"
        "‚Ä¢ 1 –º–µ—Å—è—Ü - 100 —Ä—É–±.\n"
        "‚Ä¢ 3 –º–µ—Å—è—Ü–∞ - 250 —Ä—É–±. (—ç–∫–æ–Ω–æ–º–∏—è 50 —Ä—É–±.)\n"
        "‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤ - 450 —Ä—É–±. (—ç–∫–æ–Ω–æ–º–∏—è 150 —Ä—É–±.)\n"
        "‚Ä¢ 1 –≥–æ–¥ - 800 —Ä—É–±. (—ç–∫–æ–Ω–æ–º–∏—è 400 —Ä—É–±.)\n\n"
        "üí≥ –û–ø–ª–∞—Ç–∞: –∫–∞—Ä—Ç—ã, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞",
        reply_markup=get_payment_keyboard(),
        parse_mode=types.ParseMode.HTML
    )

async def process_payment(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞"""
    tariff = callback.data.split('_')[1]
    prices = {
        '1month': 100,
        '3months': 250,
        '6months': 450,
        '1year': 800
    }
    
    amount = prices.get(tariff)
    if not amount:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    payment_data = await PaymentService.create_yookassa_payment(
        amount, 
        callback.from_user.id,
        f"VPN –ø–æ–¥–ø–∏—Å–∫–∞ {tariff}"
    )
    
    if payment_data:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î
        await PaymentService.create_payment_record(
            callback.from_user.id,
            amount,
            payment_data['id']
        )
        
        await callback.message.answer(
            f"üí≥ <b>–û–ø–ª–∞—Ç–∞</b>\n\n"
            f"–°—É–º–º–∞: {amount} —Ä—É–±.\n"
            f"–¢–∞—Ä–∏—Ñ: {tariff}\n\n"
            f"üîó <a href='{payment_data['confirmation']['confirmation_url']}'>–û–ø–ª–∞—Ç–∏—Ç—å</a>\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /check –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
            parse_mode=types.ParseMode.HTML
        )
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞")

async def check_payment(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    user_id = message.from_user.id
    payment = await Payment.query.where(
        (Payment.user_id == user_id) & 
        (Payment.status == 'pending')
    ).gino.first()
    
    if not payment:
        await message.answer("‚ùå –ü–ª–∞—Ç–µ–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    status = await PaymentService.check_payment_status(payment.payment_id)
    
    if status == 'succeeded':
        await payment.update(status='succeeded').apply()
        
        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è VPN
        vpn_service = VPNService()
        config_text = await vpn_service.create_vpn_config(user_id, 1)  # 1 –º–µ—Å—è—Ü
        
        if config_text:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞
            with open(f"config_{user_id}.ovpn", "w") as f:
                f.write(config_text)
            
            await message.answer_document(
                InputFile(f"config_{user_id}.ovpn"),
                caption="‚úÖ VPN –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω."
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            
    elif status == 'pending':
        await message.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
    else:
        await message.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª")

def register_payment_handlers(dp: Dispatcher):
    dp.register_message_handler(buy_command, commands=['buy'])
    dp.register_message_handler(check_payment, commands=['check'])
    dp.register_callback_query_handler(process_payment, lambda c: c.data.startswith('pay_'))
