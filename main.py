import os
import logging
import secrets
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
import yaml
from datetime import datetime, timedelta
import redis
import subprocess

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞
with open('config.yaml') as f:
    config = yaml.safe_load(f)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
r = redis.Redis(
    host=config['redis']['host'],
    port=config['redis']['port'],
    decode_responses=True
)

def generate_referral_code(user_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞"""
    code = secrets.token_hex(4).upper()[:8]
    r.set(f"ref:{code}", user_id, ex=2592000)  # 30 –¥–Ω–µ–π
    r.sadd(f"user:{user_id}:ref_codes", code)
    return code

def create_vpn_config(user_id: int, is_trial: bool = False, days: int = 30) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ VPN –∫–æ–Ω—Ñ–∏–≥–∞"""
    client_name = f"client_{user_id}"
    expiry_date = datetime.now() + timedelta(days=days)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ—Ç
    os.makedirs(config['vpn']['dir'], exist_ok=True)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    subprocess.run([
        'openssl', 'req', '-new', '-newkey', 'rsa:2048', '-days', str(days),
        '-nodes', '-x509', '-keyout', f"{config['vpn']['dir']}/{client_name}.key",
        '-out', f"{config['vpn']['dir']}/{client_name}.crt",
        '-subj', f'/CN={client_name}'
    ], check=True)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ .ovpn —Ñ–∞–π–ª–∞
    config_content = f"""client
dev tun
proto udp
remote {config['vpn']['server_ip']} {config['vpn']['default_port']}
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
cipher AES-256-CBC
verb 3
<ca>
{open('/etc/openvpn/ca.crt').read()}
</ca>
<cert>
{open(f"{config['vpn']['dir']}/{client_name}.crt").read()}
</cert>
<key>
{open(f"{config['vpn']['dir']}/{client_name}.key").read()}
</key>
<tls-auth>
{open('/etc/openvpn/ta.key').read()}
</tls-auth>
key-direction 1
"""
    
    with open(f"{config['vpn']['dir']}/{client_name}.ovpn", 'w') as f:
        f.write(config_content)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Redis
    r.hset(f"user:{user_id}", mapping={
        'created': datetime.now().isoformat(),
        'expires': expiry_date.isoformat(),
        'active': 'true',
        'is_trial': str(is_trial),
        'days': str(days)
    })
    
    return f"{config['vpn']['dir']}/{client_name}.ovpn"

def extend_user_subscription(user_id: int, additional_days: int):
    """–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = r.hgetall(f"user:{user_id}")
    if user_data:
        current_expiry = datetime.fromisoformat(user_data['expires'])
        new_expiry = current_expiry + timedelta(days=additional_days)
        r.hset(f"user:{user_id}", 'expires', new_expiry.isoformat())
        return new_expiry
    return None

def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    username = update.effective_user.first_name
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
    if context.args:
        ref_code = context.args[0]
        referrer_id = r.get(f"ref:{ref_code}")
        
        if referrer_id and referrer_id != str(user_id):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if not r.exists(f"user:{user_id}"):
                # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–±–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                create_vpn_config(user_id, is_trial=True, days=config['referral']['trial_days'])
                
                # –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                new_expiry = extend_user_subscription(int(referrer_id), config['referral']['bonus_days'])
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                try:
                    context.bot.send_message(
                        chat_id=referrer_id,
                        text=f"üéâ –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n"
                             f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {config['referral']['bonus_days']} –¥–Ω–µ–π.\n"
                             f"–ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {new_expiry.strftime('%d.%m.%Y')}"
                    )
                except:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {referrer_id}")
                
                update.message.reply_text(
                    f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ {config['referral']['trial_days']} –¥–Ω–µ–π!\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mykey —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ VPN."
                )
                return
    
    # –û–±—ã—á–Ω—ã–π —Å—Ç–∞—Ä—Ç –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if r.exists(f"user:{user_id}"):
        user_data = r.hgetall(f"user:{user_id}")
        expiry_date = datetime.fromisoformat(user_data['expires'])
        days_left = (expiry_date - datetime.now()).days
        
        keyboard = [
            [InlineKeyboardButton("üîë –ú–æ–π –∫–ª—é—á", callback_data='my_key')],
            [InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data='referral')],
            [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å VPN", callback_data='buy_vpn')]
        ]
        
        update.message.reply_text(
            f"‚òï –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {username}!\n"
            f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –µ—â–µ {days_left} –¥–Ω–µ–π\n\n"
            f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        keyboard = [
            [InlineKeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data='get_trial')],
            [InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data='referral_info')]
        ]
        
        update.message.reply_text(
            f"‚òï –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Coffee Coma VPN, {username}!\n\n"
            f"–ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ {config['referral']['trial_days']} –¥–Ω–µ–π "
            f"–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ {config['referral']['bonus_days']} –¥–Ω–µ–π!",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

def handle_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    user_id = query.from_user.id
    query.answer()
    
    if query.data == 'get_trial':
        if not r.exists(f"user:{user_id}"):
            create_vpn_config(user_id, is_trial=True, days=config['referral']['trial_days'])
            file_path = f"{config['vpn']['dir']}/client_{user_id}.ovpn"
            
            with open(file_path, 'rb') as f:
                query.bot.send_document(
                    chat_id=user_id,
                    document=f,
                    caption=f"üéÅ –í–∞—à –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á –Ω–∞ {config['referral']['trial_days']} –¥–Ω–µ–π!\n"
                            f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ñ–∞–π–ª –≤ OpenVPN –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
                )
            
            query.edit_message_text("‚úÖ –ü—Ä–æ–±–Ω—ã–π –∫–ª—é—á –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!")
        else:
            query.edit_message_text("‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!")
    
    elif query.data == 'my_key':
        if r.exists(f"user:{user_id}"):
            file_path = f"{config['vpn']['dir']}/client_{user_id}.ovpn"
            if os.path.exists(file_path):
                with open(file_path, 'rb') as f:
                    query.bot.send_document(
                        chat_id=user_id,
                        document=f,
                        caption="üîë –í–∞—à VPN –∫–æ–Ω—Ñ–∏–≥"
                    )
                query.edit_message_text("‚úÖ –ö–æ–Ω—Ñ–∏–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!")
            else:
                query.edit_message_text("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        else:
            query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥!")
    
    elif query.data == 'referral_info':
        ref_code = generate_referral_code(user_id)
        ref_link = f"https://t.me/{query.bot.username}?start={ref_code}"
        
        query.edit_message_text(
            f"üë• *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞*\n\n"
            f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n`{ref_link}`\n\n"
            f"üíé –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ:\n"
            f"‚Ä¢ +{config['referral']['bonus_days']} –¥–Ω–µ–π –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ\n"
            f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –ø–æ–ª—É—á–∞–µ—Ç {config['referral']['trial_days']} –¥–Ω–µ–π –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞\n\n"
            f"üìä –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {r.scard(f'user:{user_id}:ref_codes') or 0} —á–µ–ª–æ–≤–µ–∫",
            parse_mode='Markdown'
        )
    
    elif query.data == 'buy_vpn':
        payment_url = f"https://yoomoney.ru/quickpay/confirm.xml?receiver={config['payment']['yoomoney']['wallet']}&quickpay-form=small&targets=VPN+1+month&paymentType=AC&sum={config['vpn']['price']}&label={user_id}"
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
            [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data='check_payment')]
        ]
        
        query.edit_message_text(
            f"üí≥ *–û–ø–ª–∞—Ç–∞ VPN –Ω–∞ 30 –¥–Ω–µ–π*\n\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {config['vpn']['price']} —Ä—É–±.\n"
            f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {payment_url}\n\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª'",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

def check_expired_keys(context: CallbackContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π"""
    for key in r.scan_iter("user:*"):
        user_data = r.hgetall(key)
        if user_data.get('active') == 'true':
            expiry_date = datetime.fromisoformat(user_data['expires'])
            if datetime.now() > expiry_date:
                user_id = key.split(':')[1]
                client_name = f"client_{user_id}"
                
                # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
                for ext in ['.ovpn', '.key', '.crt']:
                    try:
                        os.remove(f"{config['vpn']['dir']}/{client_name}{ext}")
                    except FileNotFoundError:
                        pass
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                r.hset(key, 'active', 'false')
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    context.bot.send_message(
                        chat_id=user_id,
                        text="‚ö†Ô∏è –í–∞—à–∞ VPN –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
                    )
                except:
                    pass

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    updater = Updater(config['tokens']['main'])
    dp = updater.dispatcher
    
    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(CallbackQueryHandler(handle_callback))
    
    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
    jq = updater.job_queue
    jq.run_repeating(check_expired_keys, interval=86400)  # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()