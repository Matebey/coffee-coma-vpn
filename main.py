import os
import logging
import secrets
import random
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import yaml
from datetime import datetime, timedelta
import redis
import subprocess

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('/var/log/coffeecoma-bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

try:
    with open('/opt/coffee-coma-vpn/config.yaml') as f:
        config = yaml.safe_load(f)
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ config.yaml: {e}")
    exit(1)

try:
    r = redis.Redis(
        host=config['redis']['host'],
        port=config['redis']['port'],
        decode_responses=True,
        socket_timeout=5
    )
    r.ping()
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
    exit(1)

def generate_referral_code(user_id: int) -> str:
    code = secrets.token_hex(4).upper()[:8]
    r.set(f"ref:{code}", user_id, ex=2592000)
    r.sadd(f"user:{user_id}:ref_codes", code)
    return code

def get_available_server():
    try:
        servers = []
        for server_id in r.smembers('servers'):
            server_data = r.hgetall(f"server:{server_id}")
            if server_data and server_data.get('status') == 'active':
                servers.append(server_data)
        return random.choice(servers) if servers else None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
        return None

def assign_user_to_server(user_id: int, server_id: str):
    try:
        r.hset(f"user:{user_id}", 'server_id', server_id)
        current_users = int(r.hget(f"server:{server_id}", 'users') or 0)
        r.hset(f"server:{server_id}", 'users', current_users + 1)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")

def setup_traffic_control(server_data):
    try:
        ssh_cmd = ['ssh', '-o', 'StrictHostKeyChecking=no']
        if server_data.get('ssh_key'):
            ssh_cmd.extend(['-i', server_data['ssh_key']])
        elif server_data.get('password'):
            ssh_cmd = ['sshpass', '-p', server_data['password']] + ssh_cmd
        
        ssh_cmd.extend([
            f"{server_data['user']}@{server_data['ip']}",
            '/etc/openvpn/scripts/traffic_control.sh setup'
        ])
        
        result = subprocess.run(ssh_cmd, capture_output=True, text=True, timeout=30)
        return result.returncode == 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TC: {e}")
        return False

def create_vpn_config(user_id: int, is_trial: bool = False, days: int = 30) -> str:
    try:
        server = get_available_server()
        if not server:
            raise Exception("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
        
        server_ip = server['ip']
        server_port = server['port']
        server_id = server['id']
        
        client_name = f"client_{user_id}"
        expiry_date = datetime.now() + timedelta(days=days)
        client_ip = f"10.8.0.{100 + (user_id % 100)}"
        
        os.makedirs(config['vpn']['dir'], exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        subprocess.run([
            'openssl', 'req', '-new', '-newkey', 'rsa:2048', '-days', str(days),
            '-nodes', '-x509', '-keyout', f"{config['vpn']['dir']}/{client_name}.key",
            '-out', f"{config['vpn']['dir']}/{client_name}.crt",
            '-subj', f'/CN={client_name}'
        ], check=True, capture_output=True)
        
        # –ß—Ç–µ–Ω–∏–µ CA —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        with open('/etc/openvpn/ca.crt', 'r') as ca_file:
            ca_content = ca_file.read()
        
        # –ß—Ç–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
        with open(f"{config['vpn']['dir']}/{client_name}.crt", 'r') as cert_file:
            cert_content = cert_file.read()
        
        with open(f"{config['vpn']['dir']}/{client_name}.key", 'r') as key_file:
            key_content = key_file.read()
        
        with open('/etc/openvpn/ta.key', 'r') as ta_file:
            ta_content = ta_file.read()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ .ovpn —Ñ–∞–π–ª–∞
        config_content = f"""client
dev tun
proto udp
remote {server_ip} {server_port}
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
cipher AES-256-CBC
verb 3
<ca>
{ca_content}
</ca>
<cert>
{cert_content}
</cert>
<key>
{key_content}
</key>
<tls-auth>
{ta_content}
</tls-auth>
key-direction 1
"""
        
        with open(f"{config['vpn']['dir']}/{client_name}.ovpn", 'w') as f:
            f.write(config_content)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Redis
        r.hset(f"user:{user_id}", mapping={
            'created': datetime.now().isoformat(),
            'expires': expiry_date.isoformat(),
            'active': 'true',
            'is_trial': str(is_trial),
            'days': str(days),
            'server_id': server_id,
            'client_ip': client_ip
        })
        
        assign_user_to_server(user_id, server_id)
        
        logger.info(f"–°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {server_ip}")
        return f"{config['vpn']['dir']}/{client_name}.ovpn"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
        raise

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        username = update.effective_user.first_name
        
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({username})")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
        if context.args:
            ref_code = context.args[0]
            referrer_id = r.get(f"ref:{ref_code}")
            
            if referrer_id and referrer_id != str(user_id):
                if not r.exists(f"user:{user_id}"):
                    try:
                        create_vpn_config(user_id, is_trial=True, days=config['referral']['trial_days'])
                        await update.message.reply_text(
                            f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ {config['referral']['trial_days']} –¥–Ω–µ–π!\n"
                            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mykey —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ VPN."
                        )
                        return
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
                        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –∫–ª—é—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                        return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_exists = r.exists(f"user:{user_id}")
        
        if user_exists:
            user_data = r.hgetall(f"user:{user_id}")
            if user_data.get('active') == 'true':
                expiry_date = datetime.fromisoformat(user_data['expires'])
                days_left = (expiry_date - datetime.now()).days
                
                keyboard = [
                    [InlineKeyboardButton("üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á", callback_data='my_key')],
                    [InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data='referral')],
                    [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å VPN", callback_data='buy_vpn')]
                ]
                
                await update.message.reply_text(
                    f"‚òï –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {username}!\n"
                    f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –µ—â–µ {days_left} –¥–Ω–µ–π\n\n"
                    f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
                keyboard = [
                    [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å VPN", callback_data='buy_vpn')],
                    [InlineKeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data='get_trial')]
                ]
                
                await update.message.reply_text(
                    f"‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.\n\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å VPN –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
        else:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            keyboard = [
                [InlineKeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data='get_trial')],
                [InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data='referral_info')]
            ]
            
            await update.message.reply_text(
                f"‚òï –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Coffee Coma VPN, {username}!\n\n"
                f"–ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ {config['referral']['trial_days']} –¥–Ω–µ–π "
                f"–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ {config['referral']['bonus_days']} –¥–Ω–µ–π!",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        user_id = query.from_user.id
        await query.answer()
        
        logger.info(f"Callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {query.data}")
        
        if query.data == 'get_trial':
            if not r.exists(f"user:{user_id}"):
                try:
                    create_vpn_config(user_id, is_trial=True, days=config['referral']['trial_days'])
                    file_path = f"{config['vpn']['dir']}/client_{user_id}.ovpn"
                    
                    with open(file_path, 'rb') as f:
                        await query.bot.send_document(
                            chat_id=user_id,
                            document=f,
                            caption=f"üéÅ –í–∞—à –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á –Ω–∞ {config['referral']['trial_days']} –¥–Ω–µ–π!\n"
                                    f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ñ–∞–π–ª –≤ OpenVPN –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
                        )
                    
                    await query.edit_message_text("‚úÖ –ü—Ä–æ–±–Ω—ã–π –∫–ª—é—á –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –∫–ª—é—á–∞: {e}")
                    await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            else:
                await query.edit_message_text("‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!")
        
        elif query.data == 'my_key':
            if r.exists(f"user:{user_id}"):
                file_path = f"{config['vpn']['dir']}/client_{user_id}.ovpn"
                if os.path.exists(file_path):
                    with open(file_path, 'rb') as f:
                        await query.bot.send_document(
                            chat_id=user_id,
                            document=f,
                            caption="üîë –í–∞—à VPN –∫–æ–Ω—Ñ–∏–≥"
                        )
                    await query.edit_message_text("‚úÖ –ö–æ–Ω—Ñ–∏–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!")
                else:
                    await query.edit_message_text("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            else:
                await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥!")
        
        elif query.data in ['referral_info', 'referral']:
            ref_code = generate_referral_code(user_id)
            ref_link = f"https://t.me/{query.bot.username}?start={ref_code}"
            
            await query.edit_message_text(
                f"üë• *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞*\n\n"
                f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n`{ref_link}`\n\n"
                f"üíé –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ:\n"
                f"‚Ä¢ +{config['referral']['bonus_days']} –¥–Ω–µ–π –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ\n"
                f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –ø–æ–ª—É—á–∞–µ—Ç {config['referral']['trial_days']} –¥–Ω–µ–π –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞\n\n"
                f"üìä –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {r.scard(f'user:{user_id}:ref_codes') or 0} —á–µ–ª–æ–≤–µ–∫",
                parse_mode='Markdown'
            )
        
        elif query.data == 'buy_vpn':
            payment_url = f"https://yoomoney.ru/quickpay/confirm.xml?receiver={config['payment']['yoomoney']['wallet']}&quickpay-form=small&targets=VPN+1+month&paymentType=AC&sum={config['vpn']['price']}&label={user_id}"
            
            keyboard = [
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
                [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data='check_payment')]
            ]
            
            await query.edit_message_text(
                f"üí≥ *–û–ø–ª–∞—Ç–∞ VPN –Ω–∞ 30 –¥–Ω–µ–π*\n\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {config['vpn']['price']} —Ä—É–±.\n"
                f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {payment_url}\n\n"
                f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª'",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        
        elif query.data == 'check_payment':
            await query.edit_message_text("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É...")
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆMoney API
            # –í—Ä–µ–º–µ–Ω–Ω–æ —Å—Ä–∞–∑—É –≤—ã–¥–∞–µ–º –∫–ª—é—á
            try:
                create_vpn_config(user_id, is_trial=False, days=30)
                file_path = f"{config['vpn']['dir']}/client_{user_id}.ovpn"
                
                with open(file_path, 'rb') as f:
                    await query.bot.send_document(
                        chat_id=user_id,
                        document=f,
                        caption="‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–∞—à VPN –∫–ª—é—á –Ω–∞ 30 –¥–Ω–µ–π."
                    )
                
                await query.edit_message_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ö–ª—é—á –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")
        try:
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass

async def main():
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞...")
        
        application = Application.builder().token(config['tokens']['main']).build()
        
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("mykey", start))  # –ê–ª—åias –¥–ª—è /start
        application.add_handler(CallbackQueryHandler(handle_callback))
        
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        await application.run_polling()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    asyncio.run(main())
